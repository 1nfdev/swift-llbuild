# Check basic parsing functionality.
#
# RUN: %{llbuild} ninja parse %s 2> %t.err
# RUN: %{FileCheck} < %t.err %s

# CHECK: actOnBeginManifest("<main>")

# Check binding parsing.
#
# CHECK: basic.ninja:[[@LINE+1]]:8: error: expected '=' token
variable
# CHECK: actOnBindingDecl(/*Name=*/"variable", /*Value=*/"value")
variable = value

# Check "default" parsing.
#
# CHECK: basic.ninja:[[@LINE+1]]:7: error: expected identifier token
default
# CHECK: actOnDefaultDecl(/*Names=*/["a", "b", "c"])
default a b c
# CHECK: basic.ninja:[[@LINE+1]]:10: error: expected newline token
default a :

# Check "include" and "subninja" parsing.
#
# CHECK: actOnIncludeDecl(/*IsInclude=*/true, /*Path=*/"t2.ninja")
include t2.ninja
# CHECK: actOnIncludeDecl(/*IsInclude=*/false, /*Path=*/"t3.ninja")
subninja t3.ninja
# CHECK: basic.ninja:[[@LINE+1]]:17: error: expected newline token
include t4.ninja bad

# Check "build" parsing.
# CHECK: actOnBeginBuildDecl(/*Name=*/"cc", /*Outputs=*/["a.o"], /*Inputs=*/["b.o"], /*NumExplicitInputs=*/1, /*NumImplicitInputs=*/0)
build a.o: cc b.o
# CHECK: actOnEndBuildDecl(/*Decl=*/{{.*}})

# Check "build" implicit and order-only parsing.
# CHECK: actOnBeginBuildDecl(/*Name=*/"cc", /*Outputs=*/["a.o"], /*Inputs=*/["b.o"], /*NumExplicitInputs=*/0, /*NumImplicitInputs=*/0)
build a.o: cc | || b.o
# CHECK: actOnBeginBuildDecl(/*Name=*/"cc", /*Outputs=*/["a.o"], /*Inputs=*/["b.o", "c.o"], /*NumExplicitInputs=*/1, /*NumImplicitInputs=*/0)
build a.o: cc b.o | || c.o
# CHECK: actOnBeginBuildDecl(/*Name=*/"cc", /*Outputs=*/["a.o"], /*Inputs=*/["b.o", "c.o", "d.o"], /*NumExplicitInputs=*/1, /*NumImplicitInputs=*/1)
build a.o: cc b.o | c.o || d.o
# CHECK: basic.ninja:[[@LINE+1]]:14: error: expected newline token
build a.o: cc :

# Check "pool" parsing.
# CHECK: actOnBeginPoolDecl(/*Name=*/"linkpool"
pool linkpool
  variable = value
# CHECK: actOnEndPoolDecl(/*Decl=*/{{.*}})

# Check "rule" parsing.
# CHECK: actOnBeginRuleDecl(/*Name=*/"link"
rule link
  variable = value
# CHECK: actOnEndRuleDecl(/*Decl=*/{{.*}})

# CHECK: actOnEndManifest()
