# Check basic building functionality.
#
# RUN: rm -rf %t.build
# RUN: mkdir -p %t.build
# RUN: touch %t.build/input
# RUN: %{llbuild} buildsystem build --chdir %t.build --trace %t.trace %s > %t.out
# RUN: diff %t.build/input %t.build/output
# RUN: %{FileCheck} < %t.out %s
#
# CHECK: cp input output

# Check the engine trace.
#
# RUN: %{FileCheck} < %t.trace %s --check-prefix CHECK-TRACE
#
# CHECK-TRACE: "build-started"
# CHECK-TRACE: "new-rule", "R1", "T"
# CHECK-TRACE: "new-rule", "R2", "Noutput"
# CHECK-TRACE: "new-rule", "R3", "Ccp-output"
# CHECK-TRACE: "new-rule", "R4", "Ninput"
# CHECK-TRACE: "build-ended"

# Check that a null build does nothing.
#
# RUN: %{llbuild} buildsystem build --chdir %t.build --trace %t.trace %s > %t2.out
# RUN: %{FileCheck} < %t2.out %s --check-prefix=CHECK-REBUILD
#
# CHECK-REBUILD-NOT: cp input output

# Check that we properly copy the output when the input changes.
#
# RUN: echo mod >> %t.build/input
# RUN: %{llbuild} buildsystem build --chdir %t.build --trace %t.trace %s > %t3.out
# RUN: diff %t.build/input %t.build/output
# RUN: %{FileCheck} < %t3.out %s --check-prefix=CHECK-REBUILD-MODIFIED
#
# CHECK-REBUILD-MODIFIED: cp input output

client:
  name: basic

targets:
  "": ["output"]

commands:
  cp-output:
    tool: shell
    inputs: ["input"]
    outputs: ["output"]
    # FIXME: Design a limited mechanism for substitution. Might be tool specific.
    args: cp input output
