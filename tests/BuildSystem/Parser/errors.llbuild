# Check error handling.
#
# RUN: %{llbuild} buildsystem parse %s > %t.out 2> %t.err
# RUN: cat %t.err
# RUN: %{FileCheck} --check-prefix CHECK-ERR --input-file %t.err %s

client:
  name: basic
        # CHECK-ERR: invalid version number
  version: notaversion

tools:
        # CHECK-ERR-NEXT: invalid key type in 'tools' map
  ["bad", "key"]: that
        # CHECK-ERR-NEXT: invalid value type in 'tools' map
  that: ["bad", "value"]
  name:
        # CHECK-ERR-NEXT: invalid key type for tool in 'tools' map
        ["bad", "key"]: "bad"
        # CHECK-ERR-NEXT: invalid value type for tool in 'tools' map
        bad: ["bad", "value"]
  good:
        parameter: value
        
targets:
        # CHECK-ERR-NEXT: invalid key type in 'targets' map
  ["bad", "key"]: that
        # CHECK-ERR-NEXT: invalid value type in 'targets' map
  that:
        bad: value
        # CHECK-ERR-NEXT: invalid node type in 'targets' map
  that: [["bad", "value"]]
  good: ["node1", "node2"]

nodes:
        # CHECK-ERR-NEXT: invalid key type in 'nodes' map
  ["bad", "key"]: that
        # CHECK-ERR-NEXT: invalid value type in 'nodes' map
  that: ["bad", "value"]
  name:
        # CHECK-ERR-NEXT: invalid key type for node in 'nodes' map
        ["bad", "key"]: "bad"
        # CHECK-ERR-NEXT: invalid value type for node in 'nodes' map
        bad: ["bad", "value"]

commands:
        # CHECK-ERR-NEXT: invalid key type in 'commands' map
  ["bad", "key"]: that
        # CHECK-ERR-NEXT: invalid value type in 'commands' map
  that: ["bad", "value"]
        # CHECK-ERR-NEXT: missing 'tool' key
  command0: {}
        # CHECK-ERR-NEXT: expected 'tool' initial key
  command1:
        bad: start-key
  command2:
        # CHECK-ERR-NEXT: invalid 'tool' value type
        tool: ["bad", "key"]
  command3:
        tool: "good"
